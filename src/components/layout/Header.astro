---
import { Image } from 'astro:assets';

// Definir la interfaz de Props según documentación de Astro
export interface Props {
  companyName: string;
  buttonText?: string;
  buttonLink?: string;
  phoneNumber?: string;
  backgroundColor?: 'blue' | 'primary' | 'white' | 'transparent';
  logoSrc?: string;
  logoFile?: {
    id: number;
    url: string;
    alternativeText?: string;
    name: string;
    width: number;
    height: number;
  };
  logoAlt?: string;
}

// Extraer props con valores por defecto
const { 
  companyName,
  buttonText = 'Contacto',
  buttonLink = '/contact',
  phoneNumber,
  backgroundColor = 'primary',
  logoSrc,
  logoFile,
  logoAlt = `Logo de ${companyName}`
} = Astro.props;

// Determinar cuál logo usar (prioridad: logoFile > logoSrc)
const finalLogoSrc = logoFile?.url || logoSrc;
const finalLogoAlt = logoFile?.alternativeText || logoAlt || `Logo de ${companyName}`;
const logoWidth = logoFile?.width || 48;  // Default 48px (lg:w-12)
const logoHeight = logoFile?.height || 48;

// Definir clases de fondo según el color elegido
const backgroundClasses = {
  blue: 'bg-blue-600',
  primary: 'bg-primary-600',
  white: 'bg-white shadow-md',
  transparent: 'bg-transparent'
};

// Clases de texto según el fondo
const textClasses = {
  blue: 'text-white',
  primary: 'text-white',
  white: 'text-gray-900',
  transparent: 'text-white'
};

// Clases del botón según el fondo
const buttonClasses = {
  blue: 'bg-yellow-400 hover:bg-yellow-500 text-gray-900',
  primary: 'bg-yellow-400 hover:bg-yellow-500 text-gray-900',
  white: 'bg-primary-600 hover:bg-primary-700 text-white',
  transparent: 'bg-yellow-400 hover:bg-yellow-500 text-gray-900'
};
---

<header class={`sticky top-0 z-50 ${backgroundClasses[backgroundColor]} ${textClasses[backgroundColor]}`}>
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16 lg:h-20">
      
      <!-- Logo y nombre de la empresa -->
      <div class="flex items-center gap-3">
        {finalLogoSrc ? (
          <Image 
            src={finalLogoSrc} 
            alt={finalLogoAlt}
            width={logoWidth}
            height={logoHeight}
            class="w-10 h-10 lg:w-12 lg:h-12 object-contain"
            format="webp"
            quality="high"
            loading="lazy"
          />
        ) : (
          <!-- Logo placeholder con ícono de construcción -->
          <div class="w-10 h-10 lg:w-12 lg:h-12 bg-yellow-400 rounded-full flex items-center justify-center">
            <svg class="w-6 h-6 lg:w-7 lg:h-7 text-gray-900" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 7.172V5L8 4z" />
            </svg>
          </div>
        )}
        
        <!-- Nombre de la empresa -->
        <div class="flex flex-col">
          <h1 class="text-lg lg:text-xl font-heading font-bold leading-tight">
            {companyName}
          </h1>
          <!-- Tagline opcional via slot -->
          <div class="text-xs lg:text-sm opacity-90">
            <slot name="tagline" />
          </div>
        </div>
      </div>

      <!-- Navegación Desktop (oculta en mobile) -->
      <nav class="hidden lg:flex items-center gap-8">
        <slot name="navigation" />
      </nav>

      <!-- Información de contacto y botón (Desktop) -->
      <div class="hidden lg:flex items-center gap-6">
        <!-- Número de teléfono -->
        {phoneNumber && (
          <a 
            href={`tel:${phoneNumber.replace(/\s+/g, '')}`}
            class="flex items-center gap-2 hover:opacity-80 transition-opacity"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
            <span class="text-sm lg:text-base font-medium">{phoneNumber}</span>
          </a>
        )}

        <!-- Botón principal -->
        <a 
          href={buttonLink}
          class={`px-4 py-2 lg:px-6 lg:py-3 ${buttonClasses[backgroundColor]} font-semibold text-sm lg:text-base rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200`}
        >
          {buttonText}
        </a>
      </div>

      <!-- Mobile: Teléfono y Menú hamburguesa -->
      <div class="flex items-center gap-3 lg:hidden">
        <!-- Teléfono mobile -->
        {phoneNumber && (
          <a 
            href={`tel:${phoneNumber.replace(/\s+/g, '')}`}
            class="flex items-center justify-center w-10 h-10 rounded-full bg-white/10 hover:bg-white/20 transition-colors"
            aria-label={`Llamar a ${phoneNumber}`}
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
          </a>
        )}

        <!-- Botón Contact mobile -->
        <a 
          href={buttonLink}
          class={`px-4 py-2 ${buttonClasses[backgroundColor]} font-semibold text-sm rounded-lg shadow-lg transition-all duration-200`}
        >
          {buttonText}
        </a>

        <!-- Menú hamburguesa -->
        <button 
          class="mobile-menu-toggle flex items-center justify-center w-10 h-10 rounded-lg hover:bg-white/10 transition-colors"
          aria-label="Abrir menú de navegación"
          aria-expanded="false"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Navegación Mobile (colapsible) -->
    <div class="mobile-menu hidden lg:hidden">
      <div class="py-4 space-y-4 border-t border-white/20">
        <slot name="mobile-navigation" />
        
        <!-- Contenido adicional del menú móvil -->
        <div class="pt-4 space-y-3">
          <slot name="mobile-extra" />
        </div>
      </div>
    </div>
  </div>
</header>

<!-- JavaScript para el menú móvil -->
<script>
  // Función para toggle del menú móvil
  function initMobileMenu() {
    const toggleButton = document.querySelector('.mobile-menu-toggle');
    const mobileMenu = document.querySelector('.mobile-menu');
    
    if (toggleButton && mobileMenu) {
      toggleButton.addEventListener('click', () => {
        const isOpen = mobileMenu.classList.contains('hidden');
        
        if (isOpen) {
          mobileMenu.classList.remove('hidden');
          toggleButton.setAttribute('aria-expanded', 'true');
          
          // Cambiar ícono a X
          toggleButton.innerHTML = `
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          `;
        } else {
          mobileMenu.classList.add('hidden');
          toggleButton.setAttribute('aria-expanded', 'false');
          
          // Cambiar ícono a hamburguesa
          toggleButton.innerHTML = `
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          `;
        }
      });
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', initMobileMenu);
</script>
