---
import ServiceGallery from "./ui/ServiceGallery.astro";
import type { ServiceItem } from "./ui/ServiceGallery.astro";
import strapi from "../utils/strapi";
import type {
  StrapiEntity,
  ServiceGallery as ServiceGalleryType,
} from "../types/strapi";

export interface Props {
  title?: string;
  subtitle?: string;
  backgroundColor?: string;
  buttonColor?: string;
  containerClass?: string;
  fallbackServices?: ServiceItem[];
  overrideProps?: Partial<ServiceItem>[];
}

const {
  title,
  subtitle,
  backgroundColor ,
  buttonColor = "bg-yellow-500",
  containerClass = "",
  fallbackServices = [],
  overrideProps = [],
} = Astro.props;

// Funci√≥n para transformar datos de Strapi a formato del componente
function transformServicesData(
  strapiServices: StrapiEntity<ServiceGalleryType>[]
): ServiceItem[] {
  return strapiServices.map((service) => ({
    service_name: service.name,
    img:
      service.image?.url ||
      "https://images.unsplash.com/photo-1504307651254-35680f356dfd?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
    link: service.link || undefined,
    overlayColor: service.overlayColor || "black",
    description: service.description || undefined,
  }));
}

// Obtener servicios desde Strapi
let services: ServiceItem[] = [];
let error: string | null = null;

try {
  console.log("üîç Obteniendo servicios activos desde Strapi Cloud");
  console.log(`üì° Strapi URL: ${import.meta.env.STRAPI_URL}`);

  // Intentar primero el endpoint personalizado, luego el est√°ndar
  let servicesResponse;
  try {
    console.log("üîç Intentando endpoint personalizado: /api/services/active");
    servicesResponse = await strapi.getActiveGalleryServices();
  } catch (customError) {
    console.log(
      "‚ö†Ô∏è Endpoint personalizado fall√≥, usando endpoint est√°ndar con filtros"
    );
    servicesResponse = await strapi.getGalleryServices({
      filters: { isActive: { $eq: true } },
      sort: { order: "asc" },
      pagination: { limit: 4 },
    });
  }
  console.log(
    "üìã Respuesta completa de Strapi:",
    JSON.stringify(servicesResponse, null, 2)
  );

  if (servicesResponse.data && servicesResponse.data.length > 0) {
    services = transformServicesData(servicesResponse.data);
    console.log(`‚úÖ ${services.length} servicios cargados desde Strapi Cloud`);
    console.log("üéØ Servicios transformados:", services);

    // Aplicar overrides si se proporcionan
    if (overrideProps.length > 0) {
      services = services.map((service, index) => ({
        ...service,
        ...(overrideProps[index] || {}),
      }));
      console.log("üîÑ Overrides aplicados:", services);
    }
  } else {
    console.log("‚ö†Ô∏è No se encontraron servicios activos en Strapi Cloud");
    console.log("üìä Estructura de respuesta:", servicesResponse);

    // Solo usar fallbacks si se proporcionan expl√≠citamente
    if (fallbackServices.length > 0) {
      console.log("üîÑ Usando fallbacks proporcionados");
      services = fallbackServices;
    } else {
      console.log("‚ùå No hay servicios en Strapi ni fallbacks configurados");
      services = [];
    }
  }
} catch (e) {
  error = e instanceof Error ? e.message : "Error loading services";
  console.error("‚ùå Error detallado cargando servicios:", e);
  console.error("üîç Stack trace:", error);

  // Solo usar fallbacks como √∫ltimo recurso
  if (fallbackServices.length > 0) {
    console.log("üîÑ Usando fallbacks como √∫ltimo recurso");
    services = fallbackServices;
  } else {
    console.log("‚ùå Sin servicios disponibles");
    services = [];
  }
}

// Debug informaci√≥n
if (error) {
  console.error("‚ùå StrapiServiceGallery Error:", error);
}
---



<!-- Componente ServiceGallery con datos transformados -->
<ServiceGallery
  services={services}
  title={title}
  subtitle={subtitle}
  backgroundColor={backgroundColor}
  buttonColor={buttonColor}
  containerClass={containerClass}
>
  <!-- Slot para contenido adicional -->
  <slot />
</ServiceGallery>
