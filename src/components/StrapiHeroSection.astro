---
// Componente wrapper que conecta HeroSection con datos de Strapi
import HeroSection from './HeroSection.astro';
import strapi from '../utils/strapi';
import type { StrapiEntity, Hero } from '../types/strapi';

// Props opcionales para el wrapper
export interface Props {
  // Si se proporciona, usa este hero espec√≠fico en lugar del activo
  heroData?: StrapiEntity<Hero> | null;
  // Clase adicional para el contenedor
  class?: string;
  // Override manual de props (√∫til para testing o casos especiales)
  overrideProps?: {
    name_company?: string;
    subtitle?: string;
    showOverlay?: boolean;
    titlePosition?: 'bottom' | 'center';
  };
}

const { heroData: providedHeroData, class: className, overrideProps } = Astro.props;

// Obtener datos de Strapi si no se proporcionaron
let heroData: StrapiEntity<Hero> | null = providedHeroData || null;
let error: string | null = null;

if (!heroData) {
  try {
    console.log("üîç StrapiHeroSection: Obteniendo hero activo desde Strapi");
    heroData = await strapi.getActiveHero();
    if (heroData) {
      console.log(`‚úÖ Hero cargado: "${heroData.companyName}"`);
    } else {
      console.log("‚ö†Ô∏è No se encontr√≥ hero activo");
    }
  } catch (err) {
    console.error("‚ùå Error cargando hero:", err);
    error = err instanceof Error ? err.message : "Error desconocido";
  }
}

// Funci√≥n para convertir datos de Strapi a props del componente
function transformHeroData(hero: StrapiEntity<Hero> | null) {
  if (!hero) return null;

  // Procesar background media - ESTRUCTURA STRAPI V5: directa
  let backgroundVideo = undefined;
  let backgroundImage = undefined;

  // Si hay video de fondo
  if (hero.backgroundVideo) {
    const videoMedia = hero.backgroundVideo;
    backgroundVideo = {
      src: videoMedia.url,
      type: videoMedia.mime || (videoMedia.url.endsWith('.webm') ? 'video/webm' : 'video/mp4'),
      poster: '', // Strapi podr√≠a tener poster si lo configuramos
    };
  }
  // Si no hay video pero hay imagen
  else if (hero.backgroundImage) {
    backgroundImage = hero.backgroundImage.url;
  }

  return {
    name_company: hero.companyName,
    subtitle: hero.subtitle,
    showOverlay: hero.showOverlay,
    titlePosition: hero.titlePosition,
    backgroundVideo,
    backgroundImage,
  };
}

// Obtener props transformadas
const heroProps = transformHeroData(heroData);

// Aplicar overrides si se proporcionaron
const finalProps = heroProps ? {
  ...heroProps,
  ...overrideProps,
  class: className,
} : null;
---

{error && (
  <!-- Mostrar error en desarrollo -->
  <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded m-4" role="alert">
    <h3 class="font-bold">Error cargando Hero desde Strapi:</h3>
    <p class="text-sm">{error}</p>
    <p class="text-xs mt-2 text-gray-600">
      Verifica que Strapi est√© ejecut√°ndose y que exista al menos un Hero con isActive: true
    </p>
  </div>
)}

{!finalProps && !error && (
  <!-- Fallback cuando no hay datos disponibles -->
  <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded m-4" role="alert">
    <h3 class="font-bold">No se encontr√≥ Hero activo</h3>
    <p class="text-sm">
      No hay datos de Hero disponibles desde Strapi. 
      Aseg√∫rate de crear al menos un Hero con isActive: true en el panel de administraci√≥n.
    </p>
  </div>
)}

{finalProps && (
  <!-- Renderizar HeroSection con datos de Strapi -->
  <HeroSection {...finalProps}>
    <!-- Slot para contenido adicional -->
    <slot />
  </HeroSection>
)}

<!-- 
  DOCUMENTACI√ìN DEL COMPONENTE StrapiHeroSection
  
  Este componente wrapper se encarga de:
  1. Obtener datos del content-type Hero desde Strapi
  2. Transformar los datos a las props que espera HeroSection
  3. Manejar errores y casos sin datos
  4. Proporcionar fallbacks visuales informativos
  
  MODO DE USO:
  
  1. AUTOM√ÅTICO (obtiene hero activo):
  <StrapiHeroSection />
  
  2. CON HERO ESPEC√çFICO:
  <StrapiHeroSection heroData={heroSpecific} />
  
  3. CON OVERRIDES:
  <StrapiHeroSection overrideProps={{ showOverlay: false }} />
  
  4. CON SLOT:
  <StrapiHeroSection>
    <div>Contenido adicional centrado</div>
  </StrapiHeroSection>
  
  CONFIGURACI√ìN REQUERIDA EN STRAPI:
  
  Content-Type: Hero
  Fields:
  - companyName (Text, required)
  - subtitle (Text, optional) 
  - showOverlay (Boolean, default: true)
  - titlePosition (Enumeration: bottom,center, default: bottom)
  - backgroundVideo (Media, optional)
  - backgroundImage (Media, optional)
  - isActive (Boolean, default: false)
  - slug (UID, optional, attached to companyName)
-->
