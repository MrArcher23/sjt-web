---
// StrapiHeaderNav - HeaderNav conectado con Strapi Cloud
// Consume solo: logoFile, companyName, subtitle

import HeaderNav from "./HeaderNav.astro";
import strapi from "../utils/strapi";
import type { StrapiEntity, Header } from "../types/strapi";

export interface Props {
  navLinks?: Array<{
    href: string;
    text: string;
  }>;
  ctaText?: string;
  ctaHref?: string;
  sticky?: boolean; // Nueva prop para controlar posicionamiento
  transparent?: boolean; // Nueva prop para fondo transparente
  overrideProps?: Partial<{
    companyName: string;
    logoFile: {
      url: string;
      alternativeText?: string;
      name: string;
    };
  }>;
  class?: string;
}

const {
  navLinks,
  ctaText,
  ctaHref,
  sticky = true, // Por defecto sticky
  transparent = false, // Por defecto con fondo
  overrideProps,
  class: className,
} = Astro.props;

// Obtener datos del header desde Strapi
let headerData: StrapiEntity<Header> | null = null;
let error: string | null = null;

try {
  console.log("üîç StrapiHeaderNav: Obteniendo header activo desde Strapi");
  headerData = await strapi.getActiveHeader();
  if (headerData) {
    console.log(`‚úÖ Header cargado: "${headerData.companyName}"`);
  } else {
    console.log("‚ö†Ô∏è No se encontr√≥ header activo");
  }
} catch (err) {
  console.error("‚ùå Error cargando header:", err);
  error = err instanceof Error ? err.message : "Error desconocido";
}

// Funci√≥n para convertir datos de Strapi a props del HeaderNav
function transformHeaderData(header: StrapiEntity<Header> | null) {
  if (!header) return null;

  // Procesar logoFile - ESTRUCTURA STRAPI V5: directa
  let logoFile = undefined;
  if (header.logoFile) {
    logoFile = {
      url: header.logoFile.url,
      alternativeText: header.logoFile.alternativeText || header.logoAlt,
      name: header.logoFile.name,
      width: header.logoFile.width,
      height: header.logoFile.height,
    };
  }

  return {
    companyName: header.companyName,
    logoFile,
    // subtitle disponible pero no usado en nav por ahora
    // subtitle: header.subtitle,
  };
}

// Obtener props transformadas
const headerProps = transformHeaderData(headerData);

// Aplicar overrides si se proporcionaron
const finalProps = headerProps ? {
  ...headerProps,
  ...overrideProps,
  navLinks,
  ctaText,
  ctaHref,
  sticky,
  transparent,
  class: className,
} : {
  companyName: "Company Logo", // Fallback
  navLinks,
  ctaText,
  ctaHref,
  sticky,
  transparent,
  class: className,
};

// Aplicar overrides adicionales
if (overrideProps) {
  Object.assign(finalProps, overrideProps);
}
---

{error ? (
  <!-- Mostrar HeaderNav con datos de fallback si hay error -->
  <HeaderNav 
    companyName="Company Logo"
    navLinks={navLinks}
    ctaText={ctaText}
    ctaHref={ctaHref}
    sticky={sticky}
    transparent={transparent}
    class={`error-fallback ${className || ""}`}
  >
    <slot />
  </HeaderNav>
) : headerProps ? (
  <!-- Mostrar HeaderNav con datos de Strapi -->
  <HeaderNav {...finalProps}>
    <slot />
  </HeaderNav>
) : (
  <!-- Mostrar HeaderNav con datos de fallback si no hay datos -->
  <HeaderNav 
    companyName="Company Logo"
    navLinks={navLinks}
    ctaText={ctaText}
    ctaHref={ctaHref}
    sticky={sticky}
    transparent={transparent}
    class={`no-data-fallback ${className || ""}`}
  >
    <slot />
  </HeaderNav>
)}

<style>
  /* Estilos opcionales para indicar estados de error */
  .error-fallback {
    border-bottom: 2px solid rgba(239, 68, 68, 0.3);
  }
  
  .no-data-fallback {
    border-bottom: 2px solid rgba(245, 158, 11, 0.3);
  }
</style>
