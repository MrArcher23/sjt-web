---
import { Image } from 'astro:assets';

// Definir la interfaz de Props según documentación de Astro
export interface Props {
  title: string;
  description: string;
  buttonText?: string;
  buttonLink?: string;
  image?: {
    src: string;
    alt: string;
    width?: number;
    height?: number;
  };
  strength1?: string;
  strength2?: string;
  strength3?: string;
  backgroundColor?: 'white' | 'gray' | 'blue' | 'primary';
  reverseLayout?: boolean; // Para alternar el layout imagen-izquierda/derecha
}

// Extraer props con valores por defecto
const { 
  title, 
  description, 
  buttonText = 'Learn more about us',
  buttonLink = '#about',
  image,
  strength1,
  strength2,
  strength3,
  backgroundColor = 'white',
  reverseLayout = false
} = Astro.props;

// Definir clases de fondo según el color elegido
const backgroundClasses = {
  white: 'bg-white',
  gray: 'bg-gray-50',
  blue: 'bg-blue-50', 
  primary: 'bg-primary-50'
};

// Preparar array de fortalezas (solo las que tienen contenido)
const strengths = [strength1, strength2, strength3].filter(Boolean);
---

<section 
  class={`section-info relative overflow-hidden ${backgroundClasses[backgroundColor]} py-16 lg:py-24`}
  data-section-info
>
  <div class="container mx-auto px-4">
    <div class={`grid lg:grid-cols-2 gap-12 lg:gap-16 items-center ${reverseLayout ? 'lg:grid-flow-col-dense' : ''}`}>
      
      <!-- Imagen (lado izquierdo por defecto, derecho si reverseLayout=true) -->
      {image && (
        <div class={`info-image relative ${reverseLayout ? 'lg:col-start-2' : ''}`}>
          <!-- Contenedor con bordes redondeados y sombra sutil -->
          <div class="relative rounded-3xl overflow-hidden shadow-2xl bg-gradient-to-br from-gray-100 to-gray-200 p-2">
            <div class="rounded-2xl overflow-hidden">
              <Image 
                src={image.src} 
                alt={image.alt}
                width={image.width || 600}
                height={image.height || 450}
                format="webp"
                quality="high"
                class="w-full h-auto object-cover"
                loading="lazy"
              />
            </div>
          </div>
          
          <!-- Elementos decorativos sutiles -->
          <div class="absolute -top-4 -left-4 w-16 h-16 bg-primary-400/20 rounded-full"></div>
          <div class="absolute -bottom-6 -right-6 w-24 h-24 bg-blue-400/10 rounded-full"></div>
        </div>
      )}
      
      <!-- Contenido del lado derecho (izquierdo si reverseLayout=true) -->
      <div class={`info-content space-y-6 ${reverseLayout ? 'lg:col-start-1' : ''}`}>
        
        <!-- Título principal -->
        <h2 class="info-title text-3xl md:text-4xl lg:text-5xl font-heading font-bold text-gray-900 leading-tight">
          {title}
        </h2>
        
        <!-- Descripción -->
        <p class="info-description text-lg md:text-xl text-gray-600 leading-relaxed">
          {description}
        </p>
        
        <!-- Fortalezas/Features (si existen) -->
        {strengths.length > 0 && (
          <div class="info-strengths space-y-4 pt-2">
            {strengths.map((strength, index) => (
              <div 
                class="info-strength flex items-center gap-4"
                data-strength-index={index}
              >
                <!-- Ícono de check -->
                <div class="flex-shrink-0 w-6 h-6 bg-primary-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <!-- Texto de la fortaleza -->
                <span class="text-lg font-medium text-gray-800">{strength}</span>
              </div>
            ))}
          </div>
        )}
        
        <!-- Botón principal (si se proporciona texto) -->
        {buttonText && (
          <div class="info-button pt-4">
            <a 
              href={buttonLink}
              class="inline-flex items-center gap-2 px-6 py-3 bg-primary-600 hover:bg-primary-700 
                     text-white font-semibold rounded-lg shadow-lg hover:shadow-xl 
                     transform hover:scale-105 transition-all duration-200"
            >
              {buttonText}
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </a>
          </div>
        )}
        
      </div>
    </div>
  </div>
</section>

<style>
  /* Variables CSS para personalización de animaciones */
  :root {
    --info-animation-duration: 0.8s;
    --info-animation-timing: ease-out;
    --info-animation-stagger: 0.2s;
  }

  /* Estado inicial - elementos ocultos y listos para animar */
  .info-image,
  .info-title,
  .info-description,
  .info-strength,
  .info-button {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity var(--info-animation-duration) var(--info-animation-timing),
                transform var(--info-animation-duration) var(--info-animation-timing);
  }

  /* Animaciones que se activan SOLO cuando la sección tiene clase 'animate' */
  .section-info.animate .info-image,
  .section-info.animate .info-title,
  .section-info.animate .info-description,
  .section-info.animate .info-strength,
  .section-info.animate .info-button {
    animation: infoFadeInUp var(--info-animation-duration)
      var(--info-animation-timing) forwards;
  }

  /* Delays secuenciales para cada elemento */
  .section-info.animate .info-image {
    animation-delay: 0.1s;
  }

  .section-info.animate .info-title {
    animation-delay: 0.2s;
  }

  .section-info.animate .info-description {
    animation-delay: 0.4s;
  }

  .section-info.animate .info-strength {
    animation-delay: calc(0.6s + var(--info-animation-stagger) * var(--strength-index, 0));
  }

  .section-info.animate .info-button {
    animation-delay: 1.0s;
  }

  /* Keyframe para la animación de fade in up */
  @keyframes infoFadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Animación especial para la imagen con ligero movimiento lateral */
  .section-info.animate .info-image {
    animation-name: infoImageFadeIn;
    transform: translateY(30px) translateX(-15px);
  }

  @keyframes infoImageFadeIn {
    from {
      opacity: 0;
      transform: translateY(30px) translateX(-15px);
    }
    to {
      opacity: 1;
      transform: translateY(0) translateX(0);
    }
  }

  /* Responsivo: En móviles, animaciones más rápidas y movimientos menores */
  @media (max-width: 768px) {
    :root {
      --info-animation-duration: 0.6s;
      --info-animation-stagger: 0.15s;
    }

    .info-image,
    .info-title,
    .info-description,
    .info-strength,
    .info-button {
      transform: translateY(20px);
    }

    .section-info.animate .info-image {
      transform: translateY(20px) translateX(-10px);
    }
  }

  /* Respeto por prefer-reduced-motion (accesibilidad) */
  @media (prefers-reduced-motion: reduce) {
    .section-info.animate .info-image,
    .section-info.animate .info-title,
    .section-info.animate .info-description,
    .section-info.animate .info-strength,
    .section-info.animate .info-button {
      animation: infoFadeIn var(--info-animation-duration) var(--info-animation-timing) forwards;
      transform: none;
    }

    /* Para usuarios con reduced-motion, hacer visible inmediatamente */
    .section-info .info-image,
    .section-info .info-title,
    .section-info .info-description,
    .section-info .info-strength,
    .section-info .info-button {
      opacity: 1;
      transform: none;
    }

    @keyframes infoFadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
  }

  /* Modo alto contraste - sin animaciones */
  @media (prefers-contrast: high) {
    .section-info .info-image,
    .section-info .info-title,
    .section-info .info-description,
    .section-info .info-strength,
    .section-info .info-button {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }

  /* Estilos especiales para las fortalezas - delays dinámicos */
  .info-strength:nth-child(1) {
    --strength-index: 0;
  }
  
  .info-strength:nth-child(2) {
    --strength-index: 1;
  }
  
  .info-strength:nth-child(3) {
    --strength-index: 2;
  }
</style>

<!-- Intersection Observer Script para animaciones en scroll -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Verificar si el usuario prefiere animaciones reducidas
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    if (prefersReducedMotion) {
      // Si prefiere reduced motion, hacer todas las secciones visibles inmediatamente
      document.querySelectorAll('.section-info').forEach(section => {
        section.classList.add('animate');
      });
      return;
    }

    // Configuración del Intersection Observer
    const observerOptions = {
      threshold: 0.2, // Se activa cuando 20% del elemento es visible
      rootMargin: '0px 0px -100px 0px' // Activa un poco antes
    };

    // Crear el observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionInfo = entry.target;
          
          // Agregar clase de animación
          setTimeout(() => {
            sectionInfo.classList.add('animate');
            console.log('✨ SectionInfo animada');
          }, 100); // Pequeño delay para sincronización
          
          // Dejar de observar esta sección una vez animada
          observer.unobserve(sectionInfo);
        }
      });
    }, observerOptions);

    // Observar todas las secciones info
    const sectionInfoElements = document.querySelectorAll('.section-info[data-section-info]');
    sectionInfoElements.forEach(section => {
      observer.observe(section);
    });

    // Cleanup function para el observer
    window.addEventListener('beforeunload', () => {
      observer.disconnect();
    });
  });
</script>
