---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

export interface Props {
  title: string;
  subtitle?: string;
  description: string;
  category: string;
  location: string;
  year: string;
  client?: string;
  heroImage: string | ImageMetadata;
  heroImageAlt?: string;
  stats?: Array<{
    value: string;
    label: string;
  }>;
  highlights?: string[];
  categoryColor: string;
}

const { 
  title, 
  subtitle, 
  description, 
  category, 
  location, 
  year, 
  client,
  heroImage, 
  heroImageAlt,
  stats = [], 
  highlights = [],
  categoryColor 
} = Astro.props;
---

<div class="project-showcase relative">
  <!-- Hero Image with Overlay -->
  <div class="relative h-[70vh] overflow-hidden rounded-3xl shadow-2xl group">
    {typeof heroImage === 'string' ? (
      <img 
        src={heroImage}
        alt={heroImageAlt || title}
        class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
        loading="lazy"
      />
    ) : (
      <Image 
        src={heroImage}
        alt={heroImageAlt || title}
        class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
        width={1600}
        height={900}
        format="webp"
        loading="lazy"
      />
    )}
    
    <!-- Gradient Overlay -->
    <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-black/20"></div>
    
    <!-- Category Badge -->
    <div 
      class="absolute top-6 left-6 px-4 py-2 rounded-full text-white text-sm font-semibold backdrop-blur-md border border-white/20"
      style={`background: ${categoryColor}40`}
    >
      {category}
    </div>
    
    <!-- Year Badge -->
    <div class="absolute top-6 right-6 px-4 py-2 rounded-full bg-white/20 backdrop-blur-md text-white text-sm font-semibold border border-white/30">
      {year}
    </div>
    
    <!-- Content Overlay -->
    <div class="absolute bottom-0 left-0 right-0 p-8 lg:p-12">
      <div class="max-w-4xl">
        {subtitle && (
          <p 
            class="text-sm font-semibold tracking-wide uppercase mb-2"
            style={`color: ${categoryColor};`}
          >
            {subtitle}
          </p>
        )}
        
        <h1 class="text-4xl lg:text-6xl font-black text-white mb-4 leading-tight">
          {title}
        </h1>
        
        <div class="flex flex-wrap items-center gap-6 text-white/90 text-sm mb-6">
          <div class="flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
            </svg>
            <span>{location}</span>
          </div>
          
          {client && (
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm2 6a2 2 0 114 0 2 2 0 01-4 0zm8 0a2 2 0 11-4 0 2 2 0 014 0z" clip-rule="evenodd"/>
              </svg>
              <span>{client}</span>
            </div>
          )}
        </div>
        
        <p class="text-lg lg:text-xl text-white/90 leading-relaxed max-w-3xl">
          {description}
        </p>
      </div>
    </div>
    
    <!-- Decorative Elements -->
    <div class="absolute top-0 left-0 w-full h-2" style={`background: linear-gradient(90deg, ${categoryColor} 0%, transparent 70%)`}></div>
  </div>
  
  <!-- Stats & Highlights Section -->
  {(stats.length > 0 || highlights.length > 0) && (
    <div class="mt-8 lg:mt-12">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        
        <!-- Stats -->
        {stats.length > 0 && (
          <div class="space-y-6">
            <h3 class="text-2xl font-bold text-gray-900 mb-6">Datos del Proyecto</h3>
            <div class="grid grid-cols-2 gap-6">
              {stats.map((stat) => (
                <div class="text-center p-6 bg-gray-50 rounded-2xl border border-gray-100 hover:shadow-lg transition-all duration-300">
                  <div class="text-3xl font-black mb-2" style={`color: ${categoryColor}`}>
                    {stat.value}
                  </div>
                  <div class="text-sm text-gray-600 font-medium">
                    {stat.label}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        <!-- Highlights -->
        {highlights.length > 0 && (
          <div class="space-y-6">
            <h3 class="text-2xl font-bold text-gray-900 mb-6">Aspectos Destacados</h3>
            <div class="space-y-4">
              {highlights.map((highlight) => (
                <div class="flex items-start space-x-3">
                  <div 
                    class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mt-0.5"
                    style={`background: ${categoryColor}20`}
                  >
                    <div 
                      class="w-2 h-2 rounded-full"
                      style={`background: ${categoryColor}`}
                    ></div>
                  </div>
                  <p class="text-gray-700 leading-relaxed">{highlight}</p>
                </div>
              ))}
            </div>
          </div>
        )}
        
      </div>
    </div>
  )}
</div>

<style>
  .project-showcase:hover .hero-image {
    transform: scale(1.05);
  }
  
  /* Animation for category badge */
  .project-showcase .category-badge {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }
  
  /* Smooth transitions */
  .project-showcase * {
    transition: all 0.3s ease;
  }
</style>
