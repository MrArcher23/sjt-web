---
export interface Props {
  area: string; // SVG content
  serviceName: string;
  description: string;
  buttonText: string;
  href: string;
  cardNumber?: string;
  iconColor?: string;
  backgroundColor?: string;
}

const {
  area,
  serviceName,
  description,
  buttonText,
  href,
  cardNumber = "01",
  iconColor = "#FF5722",
  backgroundColor = "bg-white",
} = Astro.props;
---

<div
  class={`service-card group relative ${backgroundColor} rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-500 overflow-hidden border border-gray-200`}
  data-icon-color={iconColor}
>
  <!-- SVG Animated Border -->
  <svg
    class="absolute inset-0 w-full h-full pointer-events-none"
    style="border-radius: 1rem;"
  >
    <defs>
      <linearGradient
        id={`gradient-${cardNumber}`}
        x1="0%"
        y1="0%"
        x2="100%"
        y2="0%"
      >
        <stop offset="0%" style={`stop-color:${iconColor};stop-opacity:1`}
        ></stop>
        <stop offset="50%" style={`stop-color:${iconColor};stop-opacity:0.8`}
        ></stop>
        <stop offset="100%" style={`stop-color:${iconColor};stop-opacity:1`}
        ></stop>
      </linearGradient>
    </defs>
    <rect
      x="2"
      y="2"
      width="calc(100% - 4px)"
      height="calc(100% - 4px)"
      rx="14"
      ry="14"
      fill="none"
      stroke={`url(#gradient-${cardNumber})`}
      stroke-width="3"
      stroke-dasharray="1000"
      stroke-dashoffset="1000"
      class="border-animation"></rect>
  </svg>

  <!-- Card number -->
  <div
    class="relative z-10 inline-flex items-center justify-center w-12 h-8 text-black text-sm font-bold rounded mb-6 transition-all duration-300 group-hover:text-white card-number"
    style={`--icon-color: ${iconColor}`}
  >
    {cardNumber}
  </div>

  <!-- Service icon -->
  <div class="relative z-10 mb-6">
    <div
      class="inline-flex items-center justify-center w-20 h-20 rounded-2xl transition-all duration-300 group-hover:scale-110"
      style={`background-color: ${iconColor}; color: white;`}
    >
      <svg
        class="w-10 h-10"
        fill="currentColor"
        viewBox="0 0 24 24"
        set:html={area}
      />
    </div>
  </div>

  <!-- Service content -->
  <div class="relative z-10">
    <!-- Service name -->
    <h3
      class="text-2xl font-bold text-gray-900 mb-4 group-hover:text-gray-700 transition-colors duration-300"
    >
      {serviceName}
    </h3>

    <!-- Description -->
    <p class="text-gray-600 text-base leading-relaxed mb-8 line-clamp-4">
      {description}
    </p>

    <!-- Action button -->
    <div class="flex items-center justify-start">
      <a
        href={href}
        class="inline-flex items-center justify-center w-12 h-12 bg-gray-900 text-white rounded-full hover:bg-gray-800 transition-all duration-300 group-hover:scale-110 group-hover:shadow-lg"
        aria-label={`Learn more about ${serviceName}`}
      >
        <svg
          class="w-5 h-5 transform transition-transform duration-300 group-hover:translate-x-0.5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
      <span
        class="ml-4 text-sm font-semibold text-gray-700 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-2 group-hover:translate-x-0"
      >
        {buttonText}
      </span>
    </div>
  </div>
</div>

<style>
  .service-card {
    position: relative;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .service-card:hover {
    transform: translateY(-4px);
  }

  /* Card Number Hover Effect */
  .card-number {
    /* Sin fondo ni borde por defecto */
  }

  .service-card:hover .card-number {
    background-color: var(--icon-color);
    border-color: var(--icon-color);
  }

  /* SVG Border Animation */
  .border-animation {
    transition: stroke-dashoffset 1s ease-in-out;
  }

  .service-card:hover .border-animation {
    stroke-dashoffset: 0;
  }

  /* Line clamp utility */
  .line-clamp-4 {
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
