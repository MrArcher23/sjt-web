---
export interface FilterCategory {
  id: string;
  label: string;
  color: string;
  count?: number;
}

export interface Props {
  categories: FilterCategory[];
  defaultCategory?: string;
}

const { categories, defaultCategory = 'all' } = Astro.props;

const allCategory: FilterCategory = {
  id: 'all',
  label: 'Todos los Proyectos',
  color: '#6B7280',
  count: categories.reduce((total, cat) => total + (cat.count || 0), 0)
};

const allCategories = [allCategory, ...categories];
---

<div class="project-filter">
  <!-- Mobile Filter Dropdown -->
  <div class="block lg:hidden mb-6">
    <div class="relative">
      <select 
        class="mobile-filter w-full bg-white border border-gray-300 rounded-xl px-4 py-3 text-gray-700 font-medium focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent appearance-none cursor-pointer"
      >
        {allCategories.map((category) => (
          <option value={category.id} selected={category.id === defaultCategory}>
            {category.label} {category.count ? `(${category.count})` : ''}
          </option>
        ))}
      </select>
      
      <!-- Dropdown Arrow -->
      <div class="absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
      </div>
    </div>
  </div>
  
  <!-- Desktop Filter Tabs -->
  <div class="hidden lg:block">
    <div class="flex flex-wrap gap-3 mb-8">
      {allCategories.map((category) => (
        <button 
          class={`filter-btn px-6 py-3 rounded-full font-medium transition-all duration-300 border-2 relative overflow-hidden group ${category.id === defaultCategory ? 'active' : ''}`}
          data-filter={category.id}
          style={`--category-color: ${category.color}`}
        >
          <!-- Background Animation -->
          <div class="absolute inset-0 bg-gradient-to-r opacity-0 group-hover:opacity-10 transition-opacity duration-300" style={`background: ${category.color}`}></div>
          
          <!-- Content -->
          <div class="relative z-10 flex items-center space-x-2">
            <span class="filter-label">{category.label}</span>
            {category.count !== undefined && (
              <span class="count-badge text-xs font-bold rounded-full px-2 py-1 min-w-[20px] flex items-center justify-center">
                {category.count}
              </span>
            )}
          </div>
        </button>
      ))}
    </div>
  </div>
  
  <!-- Filter Results Summary -->
  <div class="filter-summary hidden">
    <div class="flex items-center justify-between mb-6 p-4 bg-gray-50 rounded-xl">
      <div>
        <p class="text-sm text-gray-600">
          Mostrando <span class="results-count font-semibold text-gray-900">0</span> proyectos
          <span class="filter-name text-gray-500"></span>
        </p>
      </div>
      
      <button class="clear-filter text-sm text-orange-600 hover:text-orange-700 font-medium hidden">
        Limpiar filtros
        <svg class="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Sort Options (Optional) -->
  <div class="filter-sort hidden lg:flex items-center justify-end mb-6">
    <div class="flex items-center space-x-4">
      <span class="text-sm text-gray-500 font-medium">Ordenar por:</span>
      <select class="sort-select bg-white border border-gray-300 rounded-lg px-3 py-2 text-sm text-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent">
        <option value="year-desc">Año (Más reciente)</option>
        <option value="year-asc">Año (Más antiguo)</option>
        <option value="title-asc">Título (A-Z)</option>
        <option value="title-desc">Título (Z-A)</option>
        <option value="category">Categoría</option>
      </select>
    </div>
  </div>
</div>

<script define:vars={{ categories, defaultCategory }}>
  // Filter functionality
  const filterButtons = document.querySelectorAll('.filter-btn');
  const mobileFilter = document.querySelector('.mobile-filter');
  const filterSummary = document.querySelector('.filter-summary');
  const resultsCount = document.querySelector('.results-count');
  const filterName = document.querySelector('.filter-name');
  const clearFilter = document.querySelector('.clear-filter');
  const sortSelect = document.querySelector('.sort-select');
  
  let currentFilter = defaultCategory;
  let currentSort = 'year-desc';
  
  // Initialize
  updateFilterButtons();
  
  // Desktop filter buttons
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.dataset.filter;
      setActiveFilter(filter);
      filterProjects(filter);
    });
  });
  
  // Mobile filter dropdown
  if (mobileFilter) {
    mobileFilter.addEventListener('change', (e) => {
      const filter = e.target.value;
      setActiveFilter(filter);
      filterProjects(filter);
    });
  }
  
  // Sort functionality
  if (sortSelect) {
    sortSelect.addEventListener('change', (e) => {
      currentSort = e.target.value;
      sortProjects(currentSort);
    });
  }
  
  // Clear filter
  if (clearFilter) {
    clearFilter.addEventListener('click', () => {
      setActiveFilter('all');
      filterProjects('all');
    });
  }
  
  function setActiveFilter(filter) {
    currentFilter = filter;
    updateFilterButtons();
    updateSummary();
  }
  
  function updateFilterButtons() {
    filterButtons.forEach(button => {
      const isActive = button.dataset.filter === currentFilter;
      const categoryColor = button.style.getPropertyValue('--category-color');
      
      button.classList.toggle('active', isActive);
      
      if (isActive) {
        button.style.backgroundColor = categoryColor;
        button.style.borderColor = categoryColor;
        button.style.color = 'white';
        
        const countBadge = button.querySelector('.count-badge');
        if (countBadge) {
          countBadge.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
          countBadge.style.color = 'white';
        }
      } else {
        button.style.backgroundColor = 'transparent';
        button.style.borderColor = '#E5E7EB';
        button.style.color = '#374151';
        
        const countBadge = button.querySelector('.count-badge');
        if (countBadge) {
          countBadge.style.backgroundColor = '#F3F4F6';
          countBadge.style.color = '#6B7280';
        }
      }
    });
    
    // Update mobile select
    if (mobileFilter) {
      mobileFilter.value = currentFilter;
    }
  }
  
  function filterProjects(filter) {
    const projects = document.querySelectorAll('[data-project-category]');
    let visibleCount = 0;
    
    projects.forEach(project => {
      const projectCategories = project.dataset.projectCategory.split(',');
      const shouldShow = filter === 'all' || projectCategories.includes(filter);
      
      if (shouldShow) {
        project.style.display = '';
        project.classList.remove('filtered-out');
        project.classList.add('filter-in');
        visibleCount++;
      } else {
        project.style.display = 'none';
        project.classList.add('filtered-out');
        project.classList.remove('filter-in');
      }
    });
    
    updateSummary(visibleCount);
  }
  
  function sortProjects(sortBy) {
    const container = document.querySelector('[data-projects-container]');
    if (!container) return;
    
    const projects = Array.from(container.children);
    
    projects.sort((a, b) => {
      switch (sortBy) {
        case 'year-desc':
          return (b.dataset.projectYear || 0) - (a.dataset.projectYear || 0);
        case 'year-asc':
          return (a.dataset.projectYear || 0) - (b.dataset.projectYear || 0);
        case 'title-asc':
          return (a.dataset.projectTitle || '').localeCompare(b.dataset.projectTitle || '');
        case 'title-desc':
          return (b.dataset.projectTitle || '').localeCompare(a.dataset.projectTitle || '');
        case 'category':
          return (a.dataset.projectCategory || '').localeCompare(b.dataset.projectCategory || '');
        default:
          return 0;
      }
    });
    
    // Re-append in sorted order
    projects.forEach(project => {
      container.appendChild(project);
    });
    
    // Add sort animation
    projects.forEach((project, index) => {
      project.style.animationDelay = `${index * 50}ms`;
      project.classList.add('sort-animation');
    });
    
    setTimeout(() => {
      projects.forEach(project => {
        project.classList.remove('sort-animation');
        project.style.animationDelay = '';
      });
    }, 1000);
  }
  
  function updateSummary(count = null) {
    if (!resultsCount || !filterName) return;
    
    if (count === null) {
      const visibleProjects = document.querySelectorAll('[data-project-category]:not(.filtered-out)');
      count = visibleProjects.length;
    }
    
    resultsCount.textContent = count;
    
    const categoryData = categories.find(cat => cat.id === currentFilter);
    const categoryName = currentFilter === 'all' ? '' : `en "${categoryData?.label || currentFilter}"`;
    filterName.textContent = categoryName;
    
    // Show/hide summary and clear button
    if (filterSummary) {
      filterSummary.classList.toggle('hidden', currentFilter === 'all' && !sortSelect?.value !== 'year-desc');
    }
    
    if (clearFilter) {
      clearFilter.classList.toggle('hidden', currentFilter === 'all');
    }
  }
  
  // Initial filter application
  filterProjects(currentFilter);
</script>

<style>
  /* Filter button styles */
  .filter-btn {
    position: relative;
    overflow: hidden;
    border-color: #E5E7EB;
    color: #374151;
    background: transparent;
  }
  
  .filter-btn:hover {
    transform: translateY(-1px);
    shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .filter-btn.active {
    transform: translateY(-2px);
    shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }
  
  /* Animation for filtered items */
  .filter-in {
    animation: filterIn 0.5s ease-out;
  }
  
  .sort-animation {
    animation: sortMove 0.8s ease-out;
  }
  
  @keyframes filterIn {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  @keyframes sortMove {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0);
    }
  }
  
  /* Count badge styles */
  .count-badge {
    background: #F3F4F6;
    color: #6B7280;
    transition: all 0.3s ease;
  }
  
  /* Mobile responsive */
  @media (max-width: 1024px) {
    .filter-btn {
      font-size: 0.875rem;
      padding: 0.625rem 1rem;
    }
  }
</style>
