---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

export interface Props {
  title: string;
  category: string;
  categoryColor: string;
  location: string;
  year: string;
  image: string | ImageMetadata;
  description: string;
  client?: string;
  status: "completed" | "in-progress" | "upcoming";
  href?: string;
  tags?: string[];
}

const {
  title,
  category,
  categoryColor,
  location,
  year,
  image,
  description,
  client,
  status = "completed",
  href = "#",
  tags = [],
} = Astro.props;

const statusConfig = {
  completed: { label: "Completado", color: "#22C55E" },
  "in-progress": { label: "En Progreso", color: "#F59E0B" },
  upcoming: { label: "Próximamente", color: "#6366F1" },
};
---

<div
  class="project-card group relative bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2"
>
  <!-- Image Container -->
  <div class="relative aspect-video overflow-hidden">
    {
      typeof image === "string" ? (
        <img
          src={image}
          alt={title}
          class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
          loading="lazy"
        />
      ) : (
        <Image
          src={image}
          alt={title}
          class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
          width={800}
          height={450}
          format="webp"
          loading="lazy"
        />
      )
    }

    <!-- Gradient Overlay -->
    <div
      class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"
    >
    </div>

    <!-- Category Badge -->
    <div
      class="absolute top-4 left-4 px-3 py-1 rounded-full text-xs font-semibold text-white backdrop-blur-md border border-white/20"
      style={`background: ${categoryColor}CC`}
    >
      {category}
    </div>

    <!-- Status Badge -->
    <div
      class="absolute top-4 right-4 px-3 py-1 rounded-full text-xs font-semibold text-white backdrop-blur-md border border-white/20"
      style={`background: ${statusConfig[status].color}CC`}
    >
      {statusConfig[status].label}
    </div>

    <!-- Hover Overlay Content -->
    <!-- <div
      class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-500 transform translate-y-4 group-hover:translate-y-0"
    >
      <a
        href={href}
        class="px-6 py-3 bg-white/90 backdrop-blur-sm rounded-full text-gray-900 font-semibold text-sm hover:bg-white transition-colors duration-300 shadow-lg"
      >
        Ver Proyecto
        <svg
          class="w-4 h-4 inline-block ml-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div> -->
  </div>

  <!-- Content -->
  <div class="p-6">
    <!-- Project Info Header -->
    <div class="flex items-center justify-between text-sm text-gray-500 mb-3">
      <div class="flex items-center space-x-4">
        <span class="flex items-center space-x-1">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
              clip-rule="evenodd"></path>
          </svg>
          <span>{location}</span>
        </span>
        <span>{year}</span>
      </div>
      {
        client && (
          <span class="text-xs bg-gray-100 px-2 py-1 rounded-full font-medium">
            {client}
          </span>
        )
      }
    </div>

    <!-- Title -->
    <h3
      class="text-xl font-bold text-gray-900 mb-3 group-hover:text-gray-700 transition-colors duration-300 line-clamp-2"
    >
      {title}
    </h3>

    <!-- Description -->
    <p class="text-gray-600 text-sm leading-relaxed mb-4 line-clamp-3">
      {description}
    </p>

    <!-- Tags -->
    {
      tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {tags.slice(0, 3).map((tag) => (
            <span
              class="text-xs px-2 py-1 rounded-full font-medium"
              style={`background: ${categoryColor}15; color: ${categoryColor}`}
            >
              {tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class="text-xs text-gray-400 font-medium">
              +{tags.length - 3} más
            </span>
          )}
        </div>
      )
    }

    <!-- Action Footer -->
    <div
      class="flex items-center justify-between pt-4 border-t border-gray-100"
    >
      <div class="flex items-center space-x-2">
        <div
          class="w-3 h-3 rounded-full"
          style={`background: ${categoryColor}`}
        >
        </div>
        <span class="text-sm font-medium text-gray-700">{category}</span>
      </div>

      <button
        class="text-gray-400 hover:text-gray-600 transition-colors duration-200 group-hover:text-gray-700"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Animated Border Effect -->
  <div
    class="absolute inset-0 rounded-2xl border-2 border-transparent bg-gradient-to-r opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none"
    style={`background: linear-gradient(45deg, ${categoryColor}20, transparent, ${categoryColor}20); background-size: 200% 200%; animation: gradient 3s ease infinite;`}
  >
  </div>
</div>

<style>
  /* Line clamp utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Gradient animation for border effect */
  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Enhanced hover effects */
  .project-card:hover {
    transform: translateY(-8px) scale(1.02);
  }

  .project-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(
      90deg,
      var(--category-color, #ff5722) 0%,
      transparent 70%
    );
    transform: scaleX(0);
    transition: transform 0.5s ease;
    transform-origin: left;
  }

  .project-card:hover::before {
    transform: scaleX(1);
  }

  /* Smooth image loading */
  .project-card img {
    transition: all 0.3s ease;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    .project-card:hover {
      transform: translateY(-4px) scale(1.01);
    }
  }
</style>
