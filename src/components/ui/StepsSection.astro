---
import StepByStep from './StepByStep.astro';
import strapi from '../../utils/strapi';
import type { StrapiEntity, Step } from '../../types/strapi';

// Props para personalizar la secci√≥n
export interface Props {
  title?: string;
  subtitle?: string;
  backgroundColor?: 'white' | 'gray-50' | 'gray-100';
  sectionId?: string;
}

// Extraer props con valores por defecto
const { 
  title = "¬øC√≥mo trabajamos?",
  subtitle = "Nuestro proceso simple y efectivo en 3 pasos",
  backgroundColor = 'gray-50',
  sectionId = 'steps-section'
} = Astro.props;

// Obtener steps desde Strapi
let steps: StrapiEntity<Step>[] = [];
let error: string | null = null;

try {
  console.log('üîç Obteniendo steps activos desde Strapi');
  const stepsResponse = await strapi.getSteps({
    filters: { isActive: { $eq: true } },
    sort: ["order:asc"]
  });
  steps = stepsResponse.data || [];
  
  if (steps.length > 0) {
    console.log(`‚úÖ ${steps.length} steps encontrados`);
  } else {
    console.log('‚ö†Ô∏è No hay steps activos, usando fallback');
    // Fallback con steps hardcodeados si no hay contenido en Strapi
    steps = [
      {
        id: 1,
        documentId: 'fallback-1',
        createdAt: '',
        updatedAt: '',
        publishedAt: '',
        title: "Cont√°ctanos",
        description: "Llamada inicial gratuita para conocer tu proyecto",
        svgIcon: `<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
        </svg>`,
        order: 1,
        isActive: true,
        backgroundColor: "yellow" as const
      },
      {
        id: 2,
        documentId: 'fallback-2',
        createdAt: '',
        updatedAt: '',
        publishedAt: '',
        title: "Evaluamos tu proyecto",
        description: "Nuestros expertos analizan tus necesidades y crean la mejor soluci√≥n",
        svgIcon: `<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
        </svg>`,
        order: 2,
        isActive: true,
        backgroundColor: "blue" as const
      },
      {
        id: 3,
        documentId: 'fallback-3',
        createdAt: '',
        updatedAt: '',
        publishedAt: '',
        title: "Ejecutamos con excelencia",
        description: "Nuestro equipo llega con todo el equipamiento necesario en tiempo r√©cord",
        svgIcon: `<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"/>
        </svg>`,
        order: 3,
        isActive: true,
        backgroundColor: "green" as const
      }
    ] as any;
  }
} catch (e) {
  error = e instanceof Error ? e.message : 'Error loading steps';
  console.warn('‚ö†Ô∏è Steps loading failed, using fallback:', error);
  // Tambi√©n usar fallback en caso de error
  steps = [];
}

// Definir clases de fondo para la secci√≥n
const sectionBackgroundClasses = {
  'white': 'bg-white',
  'gray-50': 'bg-gray-50', 
  'gray-100': 'bg-gray-100'
};
---

<section 
  id={sectionId}
  class={`section-steps py-12 sm:py-16 md:py-20 lg:py-24 ${sectionBackgroundClasses[backgroundColor]}`}
>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    
    <!-- Encabezado de la secci√≥n -->
    <div class="section-header text-center mb-12 sm:mb-16 md:mb-20">
      <h2 class="section-title text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-heading font-bold text-gray-900 mb-4 sm:mb-6">
        {title}
      </h2>
      <p class="section-subtitle text-base sm:text-lg md:text-xl lg:text-2xl text-gray-600 max-w-2xl lg:max-w-4xl mx-auto leading-relaxed">
        {subtitle}
      </p>
    </div>

    <!-- Grid de pasos -->
    <div class="steps-grid relative">
      
      {steps.length > 0 ? (
        <!-- Grid responsivo con steps din√°micos -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 sm:gap-10 md:gap-12 lg:gap-16 xl:gap-20 items-start">
          {steps.map((step, index) => {
            const showArrow = index < steps.length - 1; // Mostrar flecha en todos excepto el √∫ltimo
            const animationDelay = index * 0.2; // Delay escalonado para animaciones
            
            return (
              <div 
                class="step-wrapper relative"
                data-step-index={index}
              >
                <StepByStep 
                  title={step.title}
                  description={step.description}
                  svgIcon={step.svgIcon}
                  backgroundColor={step.backgroundColor}
                  showArrow={showArrow}
                  animationDelay={animationDelay}
                />
              </div>
            );
          })}
        </div>
      ) : (
        <!-- Estado vac√≠o o error -->
        <div class="text-center py-12 sm:py-16">
          <div class="w-16 h-16 sm:w-20 sm:h-20 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-8 h-8 sm:w-10 sm:h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
          </div>
          <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">No hay pasos configurados</h3>
          <p class="text-gray-600">Los pasos del proceso se mostrar√°n aqu√≠ una vez configurados en Strapi.</p>
        </div>
      )}

    </div>

    <!-- Slot para contenido adicional -->
    <div class="section-extra mt-12 sm:mt-16 md:mt-20">
      <slot name="extra-content" />
    </div>

  </div>
</section>

<style>
  /* Variables CSS para personalizaci√≥n de la secci√≥n */
  :root {
    --section-animation-duration: 0.8s;
    --section-animation-delay: 0.3s;
  }

  /* Animaciones para el encabezado de la secci√≥n - estas S√ç se ejecutan al cargar */
  .section-title,
  .section-subtitle {
    opacity: 0;
    transform: translateY(30px);
    animation: sectionFadeInUp var(--section-animation-duration) ease-out forwards;
  }

  .section-title {
    animation-delay: 0.1s;
  }

  .section-subtitle {
    animation-delay: 0.3s;
  }

  /* El contenedor de steps ser√° visible inmediatamente, las animaciones las manejan los steps individuales */
  .steps-grid {
    opacity: 1;
    transform: none;
  }

  /* Keyframe para animaciones de secci√≥n */
  @keyframes sectionFadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive: En m√≥viles, animaciones m√°s r√°pidas */
  @media (max-width: 768px) {
    :root {
      --section-animation-duration: 0.6s;
    }
    
    .section-title,
    .section-subtitle,
    .steps-grid {
      transform: translateY(20px);
    }
  }

  /* Respeto por prefer-reduced-motion (accesibilidad) */
  @media (prefers-reduced-motion: reduce) {
    .section-title,
    .section-subtitle,
    .steps-grid {
      animation: sectionFadeIn var(--section-animation-duration) ease-out forwards;
      transform: none;
    }

    @keyframes sectionFadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  }

  /* Modo alto contraste - sin animaciones */
  @media (prefers-contrast: high) {
    .section-title,
    .section-subtitle,
    .steps-grid {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }

  /* Estilos para mejorar la separaci√≥n visual en pantallas grandes */
  @media (min-width: 1024px) {
    .step-wrapper:not(:last-child)::after {
      content: '';
      position: absolute;
      top: 50%;
      right: -2rem;
      transform: translateY(-50%);
      width: 2rem;
      height: 2px;
      background: linear-gradient(90deg, #d1d5db, transparent);
    }
  }
</style>

<!-- Intersection Observer Script para animaciones en scroll -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Verificar si el usuario prefiere animaciones reducidas
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    if (prefersReducedMotion) {
      // Si prefiere reduced motion, hacer todos los steps visibles inmediatamente
      document.querySelectorAll('.step-container').forEach(container => {
        container.classList.add('animate');
      });
      return;
    }

    // Configuraci√≥n del Intersection Observer
    const observerOptions = {
      threshold: 0.1, // Se activa cuando 10% del elemento es visible
      rootMargin: '0px 0px -50px 0px' // Peque√±o margen para activar un poco antes
    };

    // Crear el observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const stepWrapper = entry.target;
          const stepIndex = parseInt(stepWrapper.getAttribute('data-step-index') || '0');
          const stepContainer = stepWrapper.querySelector('.step-container');
          
          if (stepContainer) {
            // Aplicar delay escalonado basado en el √≠ndice del step
            setTimeout(() => {
              stepContainer.classList.add('animate');
              console.log(`‚ú® Step ${stepIndex + 1} animado`);
            }, stepIndex * 150); // 150ms entre cada step
          }
          
          // Dejar de observar este elemento una vez animado
          observer.unobserve(stepWrapper);
        }
      });
    }, observerOptions);

    // Observar todos los step wrappers
    const stepWrappers = document.querySelectorAll('.step-wrapper[data-step-index]');
    stepWrappers.forEach(wrapper => {
      observer.observe(wrapper);
    });

    // Cleanup function para el observer
    window.addEventListener('beforeunload', () => {
      observer.disconnect();
    });
  });
</script>
